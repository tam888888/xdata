(()=>{"use strict";var e={795:(e,t,s)=>{const{EMPTY_BUFFER:r}=s(197),i=Buffer[Symbol.species];function o(e,t,s,r,i){for(let o=0;o<i;o++)s[r+o]=e[o]^t[3&o]}function n(e,t){for(let s=0;s<e.length;s++)e[s]^=t[3&s]}if(e.exports={concat:function(e,t){if(0===e.length)return r;if(1===e.length)return e[0];const s=Buffer.allocUnsafe(t);let o=0;for(let t=0;t<e.length;t++){const r=e[t];s.set(r,o),o+=r.length}return o<t?new i(s.buffer,s.byteOffset,o):s},mask:o,toArrayBuffer:function(e){return e.length===e.buffer.byteLength?e.buffer:e.buffer.slice(e.byteOffset,e.byteOffset+e.length)},toBuffer:function e(t){if(e.readOnly=!0,Buffer.isBuffer(t))return t;let s;return t instanceof ArrayBuffer?s=new i(t):ArrayBuffer.isView(t)?s=new i(t.buffer,t.byteOffset,t.byteLength):(s=Buffer.from(t),e.readOnly=!1),s},unmask:n},!process.env.WS_NO_BUFFER_UTIL)try{const t=s(Object(function(){var e=new Error("Cannot find module 'bufferutil'");throw e.code="MODULE_NOT_FOUND",e}()));e.exports.mask=function(e,s,r,i,n){n<48?o(e,s,r,i,n):t.mask(e,s,r,i,n)},e.exports.unmask=function(e,s){e.length<32?n(e,s):t.unmask(e,s)}}catch(e){}},197:e=>{e.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],EMPTY_BUFFER:Buffer.alloc(0),GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kForOnEventAttribute:Symbol("kIsForOnEventAttribute"),kListener:Symbol("kListener"),kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),NOOP:()=>{}}},365:(e,t,s)=>{const{kForOnEventAttribute:r,kListener:i}=s(197),o=Symbol("kCode"),n=Symbol("kData"),C=Symbol("kError"),S=Symbol("kMessage"),T=Symbol("kReason"),a=Symbol("kTarget"),P=Symbol("kType"),h=Symbol("kWasClean");class D{constructor(e){this[a]=null,this[P]=e}get target(){return this[a]}get type(){return this[P]}}Object.defineProperty(D.prototype,"target",{enumerable:!0}),Object.defineProperty(D.prototype,"type",{enumerable:!0});class c extends D{constructor(e,t={}){super(e),this[o]=void 0===t.code?0:t.code,this[T]=void 0===t.reason?"":t.reason,this[h]=void 0!==t.wasClean&&t.wasClean}get code(){return this[o]}get reason(){return this[T]}get wasClean(){return this[h]}}Object.defineProperty(c.prototype,"code",{enumerable:!0}),Object.defineProperty(c.prototype,"reason",{enumerable:!0}),Object.defineProperty(c.prototype,"wasClean",{enumerable:!0});class V extends D{constructor(e,t={}){super(e),this[C]=void 0===t.error?null:t.error,this[S]=void 0===t.message?"":t.message}get error(){return this[C]}get message(){return this[S]}}Object.defineProperty(V.prototype,"error",{enumerable:!0}),Object.defineProperty(V.prototype,"message",{enumerable:!0});class l extends D{constructor(e,t={}){super(e),this[n]=void 0===t.data?null:t.data}get data(){return this[n]}}Object.defineProperty(l.prototype,"data",{enumerable:!0});const H={addEventListener(e,t,s={}){for(const o of this.listeners(e))if(!s[r]&&o[i]===t&&!o[r])return;let o;if("message"===e)o=function(e,s){const r=new l("message",{data:s?e:e.toString()});r[a]=this,B(t,this,r)};else if("close"===e)o=function(e,s){const r=new c("close",{code:e,reason:s.toString(),wasClean:this._closeFrameReceived&&this._closeFrameSent});r[a]=this,B(t,this,r)};else if("error"===e)o=function(e){const s=new V("error",{error:e,message:e.message});s[a]=this,B(t,this,s)};else{if("open"!==e)return;o=function(){const e=new D("open");e[a]=this,B(t,this,e)}}o[r]=!!s[r],o[i]=t,s.once?this.once(e,o):this.on(e,o)},removeEventListener(e,t){for(const s of this.listeners(e))if(s[i]===t&&!s[r]){this.removeListener(e,s);break}}};function B(e,t,s){"object"==typeof e&&e.handleEvent?e.handleEvent.call(e,s):e.call(t,s)}e.exports={CloseEvent:c,ErrorEvent:V,Event:D,EventTarget:H,MessageEvent:l}},769:(e,t,s)=>{const{tokenChars:r}=s(767);function i(e,t,s){void 0===e[t]?e[t]=[s]:e[t].push(s)}e.exports={format:function(e){return Object.keys(e).map((t=>{let s=e[t];return Array.isArray(s)||(s=[s]),s.map((e=>[t].concat(Object.keys(e).map((t=>{let s=e[t];return Array.isArray(s)||(s=[s]),s.map((e=>!0===e?t:`${t}=${e}`)).join("; ")}))).join("; "))).join(", ")})).join(", ")},parse:function(e){const t=Object.create(null);let s,o,n=Object.create(null),C=!1,S=!1,T=!1,a=-1,P=-1,h=-1,D=0;for(;D<e.length;D++)if(P=e.charCodeAt(D),void 0===s)if(-1===h&&1===r[P])-1===a&&(a=D);else if(0===D||32!==P&&9!==P){if(59!==P&&44!==P)throw new SyntaxError(`Unexpected character at index ${D}`);{if(-1===a)throw new SyntaxError(`Unexpected character at index ${D}`);-1===h&&(h=D);const r=e.slice(a,h);44===P?(i(t,r,n),n=Object.create(null)):s=r,a=h=-1}}else-1===h&&-1!==a&&(h=D);else if(void 0===o)if(-1===h&&1===r[P])-1===a&&(a=D);else if(32===P||9===P)-1===h&&-1!==a&&(h=D);else if(59===P||44===P){if(-1===a)throw new SyntaxError(`Unexpected character at index ${D}`);-1===h&&(h=D),i(n,e.slice(a,h),!0),44===P&&(i(t,s,n),n=Object.create(null),s=void 0),a=h=-1}else{if(61!==P||-1===a||-1!==h)throw new SyntaxError(`Unexpected character at index ${D}`);o=e.slice(a,D),a=h=-1}else if(S){if(1!==r[P])throw new SyntaxError(`Unexpected character at index ${D}`);-1===a?a=D:C||(C=!0),S=!1}else if(T)if(1===r[P])-1===a&&(a=D);else if(34===P&&-1!==a)T=!1,h=D;else{if(92!==P)throw new SyntaxError(`Unexpected character at index ${D}`);S=!0}else if(34===P&&61===e.charCodeAt(D-1))T=!0;else if(-1===h&&1===r[P])-1===a&&(a=D);else if(-1===a||32!==P&&9!==P){if(59!==P&&44!==P)throw new SyntaxError(`Unexpected character at index ${D}`);{if(-1===a)throw new SyntaxError(`Unexpected character at index ${D}`);-1===h&&(h=D);let r=e.slice(a,h);C&&(r=r.replace(/\\/g,""),C=!1),i(n,o,r),44===P&&(i(t,s,n),n=Object.create(null),s=void 0),o=void 0,a=h=-1}}else-1===h&&(h=D);if(-1===a||T||32===P||9===P)throw new SyntaxError("Unexpected end of input");-1===h&&(h=D);const c=e.slice(a,h);return void 0===s?i(t,c,n):(void 0===o?i(n,c,!0):i(n,o,C?c.replace(/\\/g,""):c),i(t,s,n)),t}}},802:e=>{const t=Symbol("kDone"),s=Symbol("kRun");e.exports=class{constructor(e){this[t]=()=>{this.pending--,this[s]()},this.concurrency=e||1/0,this.jobs=[],this.pending=0}add(e){this.jobs.push(e),this[s]()}[s](){if(this.pending!==this.concurrency&&this.jobs.length){const e=this.jobs.shift();this.pending++,e(this[t])}}}},984:(e,t,s)=>{const r=s(796),i=s(795),o=s(802),{kStatusCode:n}=s(197),C=Buffer[Symbol.species],S=Buffer.from([0,0,255,255]),T=Symbol("permessage-deflate"),a=Symbol("total-length"),P=Symbol("callback"),h=Symbol("buffers"),D=Symbol("error");let c;function V(e){this[h].push(e),this[a]+=e.length}function l(e){this[a]+=e.length,this[T]._maxPayload<1||this[a]<=this[T]._maxPayload?this[h].push(e):(this[D]=new RangeError("Max payload size exceeded"),this[D].code="WS_ERR_UNSUPPORTED_MESSAGE_LENGTH",this[D][n]=1009,this.removeListener("data",l),this.reset())}function H(e){this[T]._inflate=null,e[n]=1007,this[P](e)}e.exports=class{constructor(e,t,s){if(this._maxPayload=0|s,this._options=e||{},this._threshold=void 0!==this._options.threshold?this._options.threshold:1024,this._isServer=!!t,this._deflate=null,this._inflate=null,this.params=null,!c){const e=void 0!==this._options.concurrencyLimit?this._options.concurrencyLimit:10;c=new o(e)}}static get extensionName(){return"permessage-deflate"}offer(){const e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=!0),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=!0),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:null==this._options.clientMaxWindowBits&&(e.client_max_window_bits=!0),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){if(this._inflate&&(this._inflate.close(),this._inflate=null),this._deflate){const e=this._deflate[P];this._deflate.close(),this._deflate=null,e&&e(new Error("The deflate stream was closed while data was being processed"))}}acceptAsServer(e){const t=this._options,s=e.find((e=>!(!1===t.serverNoContextTakeover&&e.server_no_context_takeover||e.server_max_window_bits&&(!1===t.serverMaxWindowBits||"number"==typeof t.serverMaxWindowBits&&t.serverMaxWindowBits>e.server_max_window_bits)||"number"==typeof t.clientMaxWindowBits&&!e.client_max_window_bits)));if(!s)throw new Error("None of the extension offers can be accepted");return t.serverNoContextTakeover&&(s.server_no_context_takeover=!0),t.clientNoContextTakeover&&(s.client_no_context_takeover=!0),"number"==typeof t.serverMaxWindowBits&&(s.server_max_window_bits=t.serverMaxWindowBits),"number"==typeof t.clientMaxWindowBits?s.client_max_window_bits=t.clientMaxWindowBits:!0!==s.client_max_window_bits&&!1!==t.clientMaxWindowBits||delete s.client_max_window_bits,s}acceptAsClient(e){const t=e[0];if(!1===this._options.clientNoContextTakeover&&t.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(t.client_max_window_bits){if(!1===this._options.clientMaxWindowBits||"number"==typeof this._options.clientMaxWindowBits&&t.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"')}else"number"==typeof this._options.clientMaxWindowBits&&(t.client_max_window_bits=this._options.clientMaxWindowBits);return t}normalizeParams(e){return e.forEach((e=>{Object.keys(e).forEach((t=>{let s=e[t];if(s.length>1)throw new Error(`Parameter "${t}" must have only a single value`);if(s=s[0],"client_max_window_bits"===t){if(!0!==s){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}else if("server_max_window_bits"===t){const e=+s;if(!Number.isInteger(e)||e<8||e>15)throw new TypeError(`Invalid value for parameter "${t}": ${s}`);s=e}else{if("client_no_context_takeover"!==t&&"server_no_context_takeover"!==t)throw new Error(`Unknown parameter "${t}"`);if(!0!==s)throw new TypeError(`Invalid value for parameter "${t}": ${s}`)}e[t]=s}))})),e}decompress(e,t,s){c.add((r=>{this._decompress(e,t,((e,t)=>{r(),s(e,t)}))}))}compress(e,t,s){c.add((r=>{this._compress(e,t,((e,t)=>{r(),s(e,t)}))}))}_decompress(e,t,s){const o=this._isServer?"client":"server";if(!this._inflate){const e=`${o}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._inflate=r.createInflateRaw({...this._options.zlibInflateOptions,windowBits:t}),this._inflate[T]=this,this._inflate[a]=0,this._inflate[h]=[],this._inflate.on("error",H),this._inflate.on("data",l)}this._inflate[P]=s,this._inflate.write(e),t&&this._inflate.write(S),this._inflate.flush((()=>{const e=this._inflate[D];if(e)return this._inflate.close(),this._inflate=null,void s(e);const r=i.concat(this._inflate[h],this._inflate[a]);this._inflate._readableState.endEmitted?(this._inflate.close(),this._inflate=null):(this._inflate[a]=0,this._inflate[h]=[],t&&this.params[`${o}_no_context_takeover`]&&this._inflate.reset()),s(null,r)}))}_compress(e,t,s){const o=this._isServer?"server":"client";if(!this._deflate){const e=`${o}_max_window_bits`,t="number"!=typeof this.params[e]?r.Z_DEFAULT_WINDOWBITS:this.params[e];this._deflate=r.createDeflateRaw({...this._options.zlibDeflateOptions,windowBits:t}),this._deflate[a]=0,this._deflate[h]=[],this._deflate.on("data",V)}this._deflate[P]=s,this._deflate.write(e),this._deflate.flush(r.Z_SYNC_FLUSH,(()=>{if(!this._deflate)return;let e=i.concat(this._deflate[h],this._deflate[a]);t&&(e=new C(e.buffer,e.byteOffset,e.length-4)),this._deflate[P]=null,this._deflate[a]=0,this._deflate[h]=[],t&&this.params[`${o}_no_context_takeover`]&&this._deflate.reset(),s(null,e)}))}}},126:(e,t,s)=>{const{Writable:r}=s(781),i=s(984),{BINARY_TYPES:o,EMPTY_BUFFER:n,kStatusCode:C,kWebSocket:S}=s(197),{concat:T,toArrayBuffer:a,unmask:P}=s(795),{isValidStatusCode:h,isValidUTF8:D}=s(767),c=Buffer[Symbol.species],V=Promise.resolve(),l="function"==typeof queueMicrotask?queueMicrotask:function(e){V.then(e).catch(B)};function H(e){throw e}function B(e){process.nextTick(H,e)}e.exports=class extends r{constructor(e={}){super(),this._allowSynchronousEvents=!!e.allowSynchronousEvents,this._binaryType=e.binaryType||o[0],this._extensions=e.extensions||{},this._isServer=!!e.isServer,this._maxPayload=0|e.maxPayload,this._skipUTF8Validation=!!e.skipUTF8Validation,this[S]=void 0,this._bufferedBytes=0,this._buffers=[],this._compressed=!1,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=!1,this._fin=!1,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._errored=!1,this._loop=!1,this._state=0}_write(e,t,s){if(8===this._opcode&&0==this._state)return s();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(s)}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){const t=this._buffers[0];return this._buffers[0]=new c(t.buffer,t.byteOffset+e,t.length-e),new c(t.buffer,t.byteOffset,e)}const t=Buffer.allocUnsafe(e);do{const s=this._buffers[0],r=t.length-e;e>=s.length?t.set(this._buffers.shift(),r):(t.set(new Uint8Array(s.buffer,s.byteOffset,e),r),this._buffers[0]=new c(s.buffer,s.byteOffset+e,s.length-e)),e-=s.length}while(e>0);return t}startLoop(e){this._loop=!0;do{switch(this._state){case 0:this.getInfo(e);break;case 1:this.getPayloadLength16(e);break;case 2:this.getPayloadLength64(e);break;case 3:this.getMask();break;case 4:this.getData(e);break;case 5:case 6:return void(this._loop=!1)}}while(this._loop);this._errored||e()}getInfo(e){if(this._bufferedBytes<2)return void(this._loop=!1);const t=this.consume(2);if(0!=(48&t[0]))return void e(this.createError(RangeError,"RSV2 and RSV3 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_2_3"));const s=64==(64&t[0]);if(!s||this._extensions[i.extensionName]){if(this._fin=128==(128&t[0]),this._opcode=15&t[0],this._payloadLength=127&t[1],0===this._opcode){if(s)return void e(this.createError(RangeError,"RSV1 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_1"));if(!this._fragmented)return void e(this.createError(RangeError,"invalid opcode 0",!0,1002,"WS_ERR_INVALID_OPCODE"));this._opcode=this._fragmented}else if(1===this._opcode||2===this._opcode){if(this._fragmented)return void e(this.createError(RangeError,`invalid opcode ${this._opcode}`,!0,1002,"WS_ERR_INVALID_OPCODE"));this._compressed=s}else{if(!(this._opcode>7&&this._opcode<11))return void e(this.createError(RangeError,`invalid opcode ${this._opcode}`,!0,1002,"WS_ERR_INVALID_OPCODE"));if(!this._fin)return void e(this.createError(RangeError,"FIN must be set",!0,1002,"WS_ERR_EXPECTED_FIN"));if(s)return void e(this.createError(RangeError,"RSV1 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_1"));if(this._payloadLength>125||8===this._opcode&&1===this._payloadLength)return void e(this.createError(RangeError,`invalid payload length ${this._payloadLength}`,!0,1002,"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"))}if(this._fin||this._fragmented||(this._fragmented=this._opcode),this._masked=128==(128&t[1]),this._isServer){if(!this._masked)return void e(this.createError(RangeError,"MASK must be set",!0,1002,"WS_ERR_EXPECTED_MASK"))}else if(this._masked)return void e(this.createError(RangeError,"MASK must be clear",!0,1002,"WS_ERR_UNEXPECTED_MASK"));126===this._payloadLength?this._state=1:127===this._payloadLength?this._state=2:this.haveLength(e)}else e(this.createError(RangeError,"RSV1 must be clear",!0,1002,"WS_ERR_UNEXPECTED_RSV_1"))}getPayloadLength16(e){this._bufferedBytes<2?this._loop=!1:(this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength(e))}getPayloadLength64(e){if(this._bufferedBytes<8)return void(this._loop=!1);const t=this.consume(8),s=t.readUInt32BE(0);s>Math.pow(2,21)-1?e(this.createError(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",!1,1009,"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH")):(this._payloadLength=s*Math.pow(2,32)+t.readUInt32BE(4),this.haveLength(e))}haveLength(e){this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0)?e(this.createError(RangeError,"Max payload size exceeded",!1,1009,"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH")):this._masked?this._state=3:this._state=4}getMask(){this._bufferedBytes<4?this._loop=!1:(this._mask=this.consume(4),this._state=4)}getData(e){let t=n;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength)return void(this._loop=!1);t=this.consume(this._payloadLength),this._masked&&0!=(this._mask[0]|this._mask[1]|this._mask[2]|this._mask[3])&&P(t,this._mask)}if(this._opcode>7)this.controlMessage(t,e);else{if(this._compressed)return this._state=5,void this.decompress(t,e);t.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(t)),this.dataMessage(e)}}decompress(e,t){this._extensions[i.extensionName].decompress(e,this._fin,((e,s)=>{if(e)return t(e);if(s.length){if(this._messageLength+=s.length,this._messageLength>this._maxPayload&&this._maxPayload>0){const e=this.createError(RangeError,"Max payload size exceeded",!1,1009,"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");return void t(e)}this._fragments.push(s)}this.dataMessage(t),0===this._state&&this.startLoop(t)}))}dataMessage(e){if(!this._fin)return void(this._state=0);const t=this._messageLength,s=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],2===this._opcode){let r;r="nodebuffer"===this._binaryType?T(s,t):"arraybuffer"===this._binaryType?a(T(s,t)):s,5===this._state||this._allowSynchronousEvents?(this.emit("message",r,!0),this._state=0):(this._state=6,l((()=>{this.emit("message",r,!0),this._state=0,this.startLoop(e)})))}else{const r=T(s,t);if(!this._skipUTF8Validation&&!D(r)){const t=this.createError(Error,"invalid UTF-8 sequence",!0,1007,"WS_ERR_INVALID_UTF8");return void e(t)}5===this._state||this._allowSynchronousEvents?(this.emit("message",r,!1),this._state=0):(this._state=6,l((()=>{this.emit("message",r,!1),this._state=0,this.startLoop(e)})))}}controlMessage(e,t){if(8!==this._opcode)this._allowSynchronousEvents?(this.emit(9===this._opcode?"ping":"pong",e),this._state=0):(this._state=6,l((()=>{this.emit(9===this._opcode?"ping":"pong",e),this._state=0,this.startLoop(t)})));else{if(0===e.length)this._loop=!1,this.emit("conclude",1005,n),this.end();else{const s=e.readUInt16BE(0);if(!h(s)){const e=this.createError(RangeError,`invalid status code ${s}`,!0,1002,"WS_ERR_INVALID_CLOSE_CODE");return void t(e)}const r=new c(e.buffer,e.byteOffset+2,e.length-2);if(!this._skipUTF8Validation&&!D(r)){const e=this.createError(Error,"invalid UTF-8 sequence",!0,1007,"WS_ERR_INVALID_UTF8");return void t(e)}this._loop=!1,this.emit("conclude",s,r),this.end()}this._state=0}}createError(e,t,s,r,i){this._loop=!1,this._errored=!0;const o=new e(s?`Invalid WebSocket frame: ${t}`:t);return Error.captureStackTrace(o,this.createError),o.code=i,o[C]=r,o}}},282:(e,t,s)=>{const{Duplex:r}=s(781),{randomFillSync:i}=s(113),o=s(984),{EMPTY_BUFFER:n}=s(197),{isValidStatusCode:C}=s(767),{mask:S,toBuffer:T}=s(795),a=Symbol("kByteLength"),P=Buffer.alloc(4);class h{constructor(e,t,s){this._extensions=t||{},s&&(this._generateMask=s,this._maskBuffer=Buffer.alloc(4)),this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(e,t){let s,r,o=!1,n=2,C=!1;t.mask&&(s=t.maskBuffer||P,t.generateMask?t.generateMask(s):i(s,0,4),C=0==(s[0]|s[1]|s[2]|s[3]),n=6),"string"==typeof e?r=t.mask&&!C||void 0===t[a]?(e=Buffer.from(e)).length:t[a]:(r=e.length,o=t.mask&&t.readOnly&&!C);let T=r;r>=65536?(n+=8,T=127):r>125&&(n+=2,T=126);const h=Buffer.allocUnsafe(o?r+n:n);return h[0]=t.fin?128|t.opcode:t.opcode,t.rsv1&&(h[0]|=64),h[1]=T,126===T?h.writeUInt16BE(r,2):127===T&&(h[2]=h[3]=0,h.writeUIntBE(r,4,6)),t.mask?(h[1]|=128,h[n-4]=s[0],h[n-3]=s[1],h[n-2]=s[2],h[n-1]=s[3],C?[h,e]:o?(S(e,s,h,n,r),[h]):(S(e,s,e,0,r),[h,e])):[h,e]}close(e,t,s,r){let i;if(void 0===e)i=n;else{if("number"!=typeof e||!C(e))throw new TypeError("First argument must be a valid error code number");if(void 0!==t&&t.length){const s=Buffer.byteLength(t);if(s>123)throw new RangeError("The message must not be greater than 123 bytes");i=Buffer.allocUnsafe(2+s),i.writeUInt16BE(e,0),"string"==typeof t?i.write(t,2):i.set(t,2)}else i=Buffer.allocUnsafe(2),i.writeUInt16BE(e,0)}const o={[a]:i.length,fin:!0,generateMask:this._generateMask,mask:s,maskBuffer:this._maskBuffer,opcode:8,readOnly:!1,rsv1:!1};this._deflating?this.enqueue([this.dispatch,i,!1,o,r]):this.sendFrame(h.frame(i,o),r)}ping(e,t,s){let r,i;if("string"==typeof e?(r=Buffer.byteLength(e),i=!1):(r=(e=T(e)).length,i=T.readOnly),r>125)throw new RangeError("The data size must not be greater than 125 bytes");const o={[a]:r,fin:!0,generateMask:this._generateMask,mask:t,maskBuffer:this._maskBuffer,opcode:9,readOnly:i,rsv1:!1};this._deflating?this.enqueue([this.dispatch,e,!1,o,s]):this.sendFrame(h.frame(e,o),s)}pong(e,t,s){let r,i;if("string"==typeof e?(r=Buffer.byteLength(e),i=!1):(r=(e=T(e)).length,i=T.readOnly),r>125)throw new RangeError("The data size must not be greater than 125 bytes");const o={[a]:r,fin:!0,generateMask:this._generateMask,mask:t,maskBuffer:this._maskBuffer,opcode:10,readOnly:i,rsv1:!1};this._deflating?this.enqueue([this.dispatch,e,!1,o,s]):this.sendFrame(h.frame(e,o),s)}send(e,t,s){const r=this._extensions[o.extensionName];let i,n,C=t.binary?2:1,S=t.compress;if("string"==typeof e?(i=Buffer.byteLength(e),n=!1):(i=(e=T(e)).length,n=T.readOnly),this._firstFragment?(this._firstFragment=!1,S&&r&&r.params[r._isServer?"server_no_context_takeover":"client_no_context_takeover"]&&(S=i>=r._threshold),this._compress=S):(S=!1,C=0),t.fin&&(this._firstFragment=!0),r){const r={[a]:i,fin:t.fin,generateMask:this._generateMask,mask:t.mask,maskBuffer:this._maskBuffer,opcode:C,readOnly:n,rsv1:S};this._deflating?this.enqueue([this.dispatch,e,this._compress,r,s]):this.dispatch(e,this._compress,r,s)}else this.sendFrame(h.frame(e,{[a]:i,fin:t.fin,generateMask:this._generateMask,mask:t.mask,maskBuffer:this._maskBuffer,opcode:C,readOnly:n,rsv1:!1}),s)}dispatch(e,t,s,r){if(!t)return void this.sendFrame(h.frame(e,s),r);const i=this._extensions[o.extensionName];this._bufferedBytes+=s[a],this._deflating=!0,i.compress(e,s.fin,((e,t)=>{if(this._socket.destroyed){const e=new Error("The socket was closed while data was being compressed");"function"==typeof r&&r(e);for(let t=0;t<this._queue.length;t++){const s=this._queue[t],r=s[s.length-1];"function"==typeof r&&r(e)}}else this._bufferedBytes-=s[a],this._deflating=!1,s.readOnly=!1,this.sendFrame(h.frame(t,s),r),this.dequeue()}))}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[3][a],Reflect.apply(e[0],this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[3][a],this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.cork(),this._socket.write(e[0]),this._socket.write(e[1],t),this._socket.uncork()):this._socket.write(e[0],t)}}e.exports=h},254:(e,t,s)=>{const{Duplex:r}=s(781);function i(e){e.emit("close")}function o(){!this.destroyed&&this._writableState.finished&&this.destroy()}function n(e){this.removeListener("error",n),this.destroy(),0===this.listenerCount("error")&&this.emit("error",e)}e.exports=function(e,t){let s=!0;const C=new r({...t,autoDestroy:!1,emitClose:!1,objectMode:!1,writableObjectMode:!1});return e.on("message",(function(t,s){const r=!s&&C._readableState.objectMode?t.toString():t;C.push(r)||e.pause()})),e.once("error",(function(e){C.destroyed||(s=!1,C.destroy(e))})),e.once("close",(function(){C.destroyed||C.push(null)})),C._destroy=function(t,r){if(e.readyState===e.CLOSED)return r(t),void process.nextTick(i,C);let o=!1;e.once("error",(function(e){o=!0,r(e)})),e.once("close",(function(){o||r(t),process.nextTick(i,C)})),s&&e.terminate()},C._final=function(t){e.readyState!==e.CONNECTING?null!==e._socket&&(e._socket._writableState.finished?(t(),C._readableState.endEmitted&&C.destroy()):(e._socket.once("finish",(function(){t()})),e.close())):e.once("open",(function(){C._final(t)}))},C._read=function(){e.isPaused&&e.resume()},C._write=function(t,s,r){e.readyState!==e.CONNECTING?e.send(t,r):e.once("open",(function(){C._write(t,s,r)}))},C.on("end",o),C.on("error",n),C}},873:(e,t,s)=>{const{tokenChars:r}=s(767);e.exports={parse:function(e){const t=new Set;let s=-1,i=-1,o=0;for(;o<e.length;o++){const n=e.charCodeAt(o);if(-1===i&&1===r[n])-1===s&&(s=o);else if(0===o||32!==n&&9!==n){if(44!==n)throw new SyntaxError(`Unexpected character at index ${o}`);{if(-1===s)throw new SyntaxError(`Unexpected character at index ${o}`);-1===i&&(i=o);const r=e.slice(s,i);if(t.has(r))throw new SyntaxError(`The "${r}" subprotocol is duplicated`);t.add(r),s=i=-1}}else-1===i&&-1!==s&&(i=o)}if(-1===s||-1!==i)throw new SyntaxError("Unexpected end of input");const n=e.slice(s,o);if(t.has(n))throw new SyntaxError(`The "${n}" subprotocol is duplicated`);return t.add(n),t}}},767:(e,t,s)=>{const{isUtf8:r}=s(300);function i(e){const t=e.length;let s=0;for(;s<t;)if(0==(128&e[s]))s++;else if(192==(224&e[s])){if(s+1===t||128!=(192&e[s+1])||192==(254&e[s]))return!1;s+=2}else if(224==(240&e[s])){if(s+2>=t||128!=(192&e[s+1])||128!=(192&e[s+2])||224===e[s]&&128==(224&e[s+1])||237===e[s]&&160==(224&e[s+1]))return!1;s+=3}else{if(240!=(248&e[s]))return!1;if(s+3>=t||128!=(192&e[s+1])||128!=(192&e[s+2])||128!=(192&e[s+3])||240===e[s]&&128==(240&e[s+1])||244===e[s]&&e[s+1]>143||e[s]>244)return!1;s+=4}return!0}if(e.exports={isValidStatusCode:function(e){return e>=1e3&&e<=1014&&1004!==e&&1005!==e&&1006!==e||e>=3e3&&e<=4999},isValidUTF8:i,tokenChars:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0]},r)e.exports.isValidUTF8=function(e){return e.length<24?i(e):r(e)};else if(!process.env.WS_NO_UTF_8_VALIDATE)try{const t=s(Object(function(){var e=new Error("Cannot find module 'utf-8-validate'");throw e.code="MODULE_NOT_FOUND",e}()));e.exports.isValidUTF8=function(e){return e.length<32?i(e):t(e)}}catch(e){}},133:(e,t,s)=>{const r=s(361),i=s(685),{Duplex:o}=s(781),{createHash:n}=s(113),C=s(769),S=s(984),T=s(873),a=s(545),{GUID:P,kWebSocket:h}=s(197),D=/^[+/0-9A-Za-z]{22}==$/;function c(e){e._state=2,e.emit("close")}function V(){this.destroy()}function l(e,t,s,r){s=s||i.STATUS_CODES[t],r={Connection:"close","Content-Type":"text/html","Content-Length":Buffer.byteLength(s),...r},e.once("finish",e.destroy),e.end(`HTTP/1.1 ${t} ${i.STATUS_CODES[t]}\r\n`+Object.keys(r).map((e=>`${e}: ${r[e]}`)).join("\r\n")+"\r\n\r\n"+s)}function H(e,t,s,r,i){if(e.listenerCount("wsClientError")){const r=new Error(i);Error.captureStackTrace(r,H),e.emit("wsClientError",r,s,t)}else l(s,r,i)}e.exports=class extends r{constructor(e,t){if(super(),null==(e={allowSynchronousEvents:!1,autoPong:!0,maxPayload:104857600,skipUTF8Validation:!1,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null,WebSocket:a,...e}).port&&!e.server&&!e.noServer||null!=e.port&&(e.server||e.noServer)||e.server&&e.noServer)throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');if(null!=e.port?(this._server=i.createServer(((e,t)=>{const s=i.STATUS_CODES[426];t.writeHead(426,{"Content-Length":s.length,"Content-Type":"text/plain"}),t.end(s)})),this._server.listen(e.port,e.host,e.backlog,t)):e.server&&(this._server=e.server),this._server){const e=this.emit.bind(this,"connection");this._removeListeners=function(e,t){for(const s of Object.keys(t))e.on(s,t[s]);return function(){for(const s of Object.keys(t))e.removeListener(s,t[s])}}(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(t,s,r)=>{this.handleUpgrade(t,s,r,e)}})}!0===e.perMessageDeflate&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set,this._shouldEmitClose=!1),this.options=e,this._state=0}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(2===this._state)return e&&this.once("close",(()=>{e(new Error("The server is not running"))})),void process.nextTick(c,this);if(e&&this.once("close",e),1!==this._state)if(this._state=1,this.options.noServer||this.options.server)this._server&&(this._removeListeners(),this._removeListeners=this._server=null),this.clients&&this.clients.size?this._shouldEmitClose=!0:process.nextTick(c,this);else{const e=this._server;this._removeListeners(),this._removeListeners=this._server=null,e.close((()=>{c(this)}))}}shouldHandle(e){if(this.options.path){const t=e.url.indexOf("?");if((-1!==t?e.url.slice(0,t):e.url)!==this.options.path)return!1}return!0}handleUpgrade(e,t,s,r){t.on("error",V);const i=e.headers["sec-websocket-key"],o=+e.headers["sec-websocket-version"];if("GET"!==e.method)return void H(this,e,t,405,"Invalid HTTP method");if("websocket"!==e.headers.upgrade.toLowerCase())return void H(this,e,t,400,"Invalid Upgrade header");if(!i||!D.test(i))return void H(this,e,t,400,"Missing or invalid Sec-WebSocket-Key header");if(8!==o&&13!==o)return void H(this,e,t,400,"Missing or invalid Sec-WebSocket-Version header");if(!this.shouldHandle(e))return void l(t,400);const n=e.headers["sec-websocket-protocol"];let a=new Set;if(void 0!==n)try{a=T.parse(n)}catch(s){return void H(this,e,t,400,"Invalid Sec-WebSocket-Protocol header")}const P=e.headers["sec-websocket-extensions"],h={};if(this.options.perMessageDeflate&&void 0!==P){const s=new S(this.options.perMessageDeflate,!0,this.options.maxPayload);try{const e=C.parse(P);e[S.extensionName]&&(s.accept(e[S.extensionName]),h[S.extensionName]=s)}catch(s){return void H(this,e,t,400,"Invalid or unacceptable Sec-WebSocket-Extensions header")}}if(this.options.verifyClient){const n={origin:e.headers[8===o?"sec-websocket-origin":"origin"],secure:!(!e.socket.authorized&&!e.socket.encrypted),req:e};if(2===this.options.verifyClient.length)return void this.options.verifyClient(n,((o,n,C,S)=>{if(!o)return l(t,n||401,C,S);this.completeUpgrade(h,i,a,e,t,s,r)}));if(!this.options.verifyClient(n))return l(t,401)}this.completeUpgrade(h,i,a,e,t,s,r)}completeUpgrade(e,t,s,r,i,o,T){if(!i.readable||!i.writable)return i.destroy();if(i[h])throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");if(this._state>0)return l(i,503);const a=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${n("sha1").update(t+P).digest("base64")}`],D=new this.options.WebSocket(null,void 0,this.options);if(s.size){const e=this.options.handleProtocols?this.options.handleProtocols(s,r):s.values().next().value;e&&(a.push(`Sec-WebSocket-Protocol: ${e}`),D._protocol=e)}if(e[S.extensionName]){const t=e[S.extensionName].params,s=C.format({[S.extensionName]:[t]});a.push(`Sec-WebSocket-Extensions: ${s}`),D._extensions=e}this.emit("headers",a,r),i.write(a.concat("\r\n").join("\r\n")),i.removeListener("error",V),D.setSocket(i,o,{allowSynchronousEvents:this.options.allowSynchronousEvents,maxPayload:this.options.maxPayload,skipUTF8Validation:this.options.skipUTF8Validation}),this.clients&&(this.clients.add(D),D.on("close",(()=>{this.clients.delete(D),this._shouldEmitClose&&!this.clients.size&&process.nextTick(c,this)}))),T(D,r)}}},545:(e,t,s)=>{const r=s(361),i=s(687),o=s(685),n=s(808),C=s(404),{randomBytes:S,createHash:T}=s(113),{Duplex:a,Readable:P}=s(781),{URL:h}=s(310),D=s(984),c=s(126),V=s(282),{BINARY_TYPES:l,EMPTY_BUFFER:H,GUID:B,kForOnEventAttribute:d,kListener:N,kStatusCode:M,kWebSocket:f,NOOP:A}=s(197),{EventTarget:{addEventListener:G,removeEventListener:_}}=s(365),{format:u,parse:L}=s(769),{toBuffer:E}=s(795),I=Symbol("kAborted"),p=[8,13],m=["CONNECTING","OPEN","CLOSING","CLOSED"],y=/^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;class R extends r{constructor(e,t,s){super(),this._binaryType=l[0],this._closeCode=1006,this._closeFrameReceived=!1,this._closeFrameSent=!1,this._closeMessage=H,this._closeTimer=null,this._extensions={},this._paused=!1,this._protocol="",this._readyState=R.CONNECTING,this._receiver=null,this._sender=null,this._socket=null,null!==e?(this._bufferedAmount=0,this._isServer=!1,this._redirects=0,void 0===t?t=[]:Array.isArray(t)||("object"==typeof t&&null!==t?(s=t,t=[]):t=[t]),g(this,e,t,s)):(this._autoPong=s.autoPong,this._isServer=!0)}get binaryType(){return this._binaryType}set binaryType(e){l.includes(e)&&(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e))}get bufferedAmount(){return this._socket?this._socket._writableState.length+this._sender._bufferedBytes:this._bufferedAmount}get extensions(){return Object.keys(this._extensions).join()}get isPaused(){return this._paused}get onclose(){return null}get onerror(){return null}get onopen(){return null}get onmessage(){return null}get protocol(){return this._protocol}get readyState(){return this._readyState}get url(){return this._url}setSocket(e,t,s){const r=new c({allowSynchronousEvents:s.allowSynchronousEvents,binaryType:this.binaryType,extensions:this._extensions,isServer:this._isServer,maxPayload:s.maxPayload,skipUTF8Validation:s.skipUTF8Validation});this._sender=new V(e,this._extensions,s.generateMask),this._receiver=r,this._socket=e,r[f]=this,e[f]=this,r.on("conclude",k),r.on("drain",W),r.on("error",x),r.on("message",U),r.on("ping",X),r.on("pong",Q),e.setTimeout&&e.setTimeout(0),e.setNoDelay&&e.setNoDelay(),t.length>0&&e.unshift(t),e.on("close",$),e.on("data",Y),e.on("end",j),e.on("error",q),this._readyState=R.OPEN,this.emit("open")}emitClose(){if(!this._socket)return this._readyState=R.CLOSED,void this.emit("close",this._closeCode,this._closeMessage);this._extensions[D.extensionName]&&this._extensions[D.extensionName].cleanup(),this._receiver.removeAllListeners(),this._readyState=R.CLOSED,this.emit("close",this._closeCode,this._closeMessage)}close(e,t){if(this.readyState!==R.CLOSED)if(this.readyState!==R.CONNECTING)this.readyState!==R.CLOSING?(this._readyState=R.CLOSING,this._sender.close(e,t,!this._isServer,(e=>{e||(this._closeFrameSent=!0,(this._closeFrameReceived||this._receiver._writableState.errorEmitted)&&this._socket.end())})),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),3e4)):this._closeFrameSent&&(this._closeFrameReceived||this._receiver._writableState.errorEmitted)&&this._socket.end();else{const e="WebSocket was closed before the connection was established";O(this,this._req,e)}}pause(){this.readyState!==R.CONNECTING&&this.readyState!==R.CLOSED&&(this._paused=!0,this._socket.pause())}ping(e,t,s){if(this.readyState===R.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===R.OPEN?(void 0===t&&(t=!this._isServer),this._sender.ping(e||H,t,s)):w(this,e,s)}pong(e,t,s){if(this.readyState===R.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");"function"==typeof e?(s=e,e=t=void 0):"function"==typeof t&&(s=t,t=void 0),"number"==typeof e&&(e=e.toString()),this.readyState===R.OPEN?(void 0===t&&(t=!this._isServer),this._sender.pong(e||H,t,s)):w(this,e,s)}resume(){this.readyState!==R.CONNECTING&&this.readyState!==R.CLOSED&&(this._paused=!1,this._receiver._writableState.needDrain||this._socket.resume())}send(e,t,s){if(this.readyState===R.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if("function"==typeof t&&(s=t,t={}),"number"==typeof e&&(e=e.toString()),this.readyState!==R.OPEN)return void w(this,e,s);const r={binary:"string"!=typeof e,mask:!this._isServer,compress:!0,fin:!0,...t};this._extensions[D.extensionName]||(r.compress=!1),this._sender.send(e||H,r,s)}terminate(){if(this.readyState!==R.CLOSED)if(this.readyState!==R.CONNECTING)this._socket&&(this._readyState=R.CLOSING,this._socket.destroy());else{const e="WebSocket was closed before the connection was established";O(this,this._req,e)}}}function g(e,t,s,r){const n={allowSynchronousEvents:!1,autoPong:!0,protocolVersion:p[1],maxPayload:104857600,skipUTF8Validation:!1,perMessageDeflate:!0,followRedirects:!1,maxRedirects:10,...r,createConnection:void 0,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:"GET",host:void 0,path:void 0,port:void 0};if(e._autoPong=n.autoPong,!p.includes(n.protocolVersion))throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${p.join(", ")})`);let C;if(t instanceof h)C=t;else try{C=new h(t)}catch(e){throw new SyntaxError(`Invalid URL: ${t}`)}"http:"===C.protocol?C.protocol="ws:":"https:"===C.protocol&&(C.protocol="wss:"),e._url=C.href;const a="wss:"===C.protocol,P="ws+unix:"===C.protocol;let c;if("ws:"===C.protocol||a||P?P&&!C.pathname?c="The URL's pathname is empty":C.hash&&(c="The URL contains a fragment identifier"):c='The URL\'s protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"',c){const t=new SyntaxError(c);if(0===e._redirects)throw t;return void v(e,t)}const V=a?443:80,l=S(16).toString("base64"),H=a?i.request:o.request,d=new Set;let N,M;if(n.createConnection=a?b:F,n.defaultPort=n.defaultPort||V,n.port=C.port||V,n.host=C.hostname.startsWith("[")?C.hostname.slice(1,-1):C.hostname,n.headers={...n.headers,"Sec-WebSocket-Version":n.protocolVersion,"Sec-WebSocket-Key":l,Connection:"Upgrade",Upgrade:"websocket"},n.path=C.pathname+C.search,n.timeout=n.handshakeTimeout,n.perMessageDeflate&&(N=new D(!0!==n.perMessageDeflate?n.perMessageDeflate:{},!1,n.maxPayload),n.headers["Sec-WebSocket-Extensions"]=u({[D.extensionName]:N.offer()})),s.length){for(const e of s){if("string"!=typeof e||!y.test(e)||d.has(e))throw new SyntaxError("An invalid or duplicated subprotocol was specified");d.add(e)}n.headers["Sec-WebSocket-Protocol"]=s.join(",")}if(n.origin&&(n.protocolVersion<13?n.headers["Sec-WebSocket-Origin"]=n.origin:n.headers.Origin=n.origin),(C.username||C.password)&&(n.auth=`${C.username}:${C.password}`),P){const e=n.path.split(":");n.socketPath=e[0],n.path=e[1]}if(n.followRedirects){if(0===e._redirects){e._originalIpc=P,e._originalSecure=a,e._originalHostOrSocketPath=P?n.socketPath:C.host;const t=r&&r.headers;if(r={...r,headers:{}},t)for(const[e,s]of Object.entries(t))r.headers[e.toLowerCase()]=s}else if(0===e.listenerCount("redirect")){const t=P?!!e._originalIpc&&n.socketPath===e._originalHostOrSocketPath:!e._originalIpc&&C.host===e._originalHostOrSocketPath;(!t||e._originalSecure&&!a)&&(delete n.headers.authorization,delete n.headers.cookie,t||delete n.headers.host,n.auth=void 0)}n.auth&&!r.headers.authorization&&(r.headers.authorization="Basic "+Buffer.from(n.auth).toString("base64")),M=e._req=H(n),e._redirects&&e.emit("redirect",e.url,M)}else M=e._req=H(n);n.timeout&&M.on("timeout",(()=>{O(e,M,"Opening handshake has timed out")})),M.on("error",(t=>{null===M||M[I]||(M=e._req=null,v(e,t))})),M.on("response",(i=>{const o=i.headers.location,C=i.statusCode;if(o&&n.followRedirects&&C>=300&&C<400){if(++e._redirects>n.maxRedirects)return void O(e,M,"Maximum redirects exceeded");let i;M.abort();try{i=new h(o,t)}catch(t){const s=new SyntaxError(`Invalid URL: ${o}`);return void v(e,s)}g(e,i,s,r)}else e.emit("unexpected-response",M,i)||O(e,M,`Unexpected server response: ${i.statusCode}`)})),M.on("upgrade",((t,s,r)=>{if(e.emit("upgrade",t),e.readyState!==R.CONNECTING)return;if(M=e._req=null,"websocket"!==t.headers.upgrade.toLowerCase())return void O(e,s,"Invalid Upgrade header");const i=T("sha1").update(l+B).digest("base64");if(t.headers["sec-websocket-accept"]!==i)return void O(e,s,"Invalid Sec-WebSocket-Accept header");const o=t.headers["sec-websocket-protocol"];let C;if(void 0!==o?d.size?d.has(o)||(C="Server sent an invalid subprotocol"):C="Server sent a subprotocol but none was requested":d.size&&(C="Server sent no subprotocol"),C)return void O(e,s,C);o&&(e._protocol=o);const S=t.headers["sec-websocket-extensions"];if(void 0!==S){if(!N)return void O(e,s,"Server sent a Sec-WebSocket-Extensions header but no extension was requested");let t;try{t=L(S)}catch(t){return void O(e,s,"Invalid Sec-WebSocket-Extensions header")}const r=Object.keys(t);if(1!==r.length||r[0]!==D.extensionName)return void O(e,s,"Server indicated an extension that was not requested");try{N.accept(t[D.extensionName])}catch(t){return void O(e,s,"Invalid Sec-WebSocket-Extensions header")}e._extensions[D.extensionName]=N}e.setSocket(s,r,{allowSynchronousEvents:n.allowSynchronousEvents,generateMask:n.generateMask,maxPayload:n.maxPayload,skipUTF8Validation:n.skipUTF8Validation})})),n.finishRequest?n.finishRequest(M,e):M.end()}function v(e,t){e._readyState=R.CLOSING,e.emit("error",t),e.emitClose()}function F(e){return e.path=e.socketPath,n.connect(e)}function b(e){return e.path=void 0,e.servername||""===e.servername||(e.servername=n.isIP(e.host)?"":e.host),C.connect(e)}function O(e,t,s){e._readyState=R.CLOSING;const r=new Error(s);Error.captureStackTrace(r,O),t.setHeader?(t[I]=!0,t.abort(),t.socket&&!t.socket.destroyed&&t.socket.destroy(),process.nextTick(v,e,r)):(t.destroy(r),t.once("error",e.emit.bind(e,"error")),t.once("close",e.emitClose.bind(e)))}function w(e,t,s){if(t){const s=E(t).length;e._socket?e._sender._bufferedBytes+=s:e._bufferedAmount+=s}if(s){const t=new Error(`WebSocket is not open: readyState ${e.readyState} (${m[e.readyState]})`);process.nextTick(s,t)}}function k(e,t){const s=this[f];s._closeFrameReceived=!0,s._closeMessage=t,s._closeCode=e,void 0!==s._socket[f]&&(s._socket.removeListener("data",Y),process.nextTick(J,s._socket),1005===e?s.close():s.close(e,t))}function W(){const e=this[f];e.isPaused||e._socket.resume()}function x(e){const t=this[f];void 0!==t._socket[f]&&(t._socket.removeListener("data",Y),process.nextTick(J,t._socket),t.close(e[M])),t.emit("error",e)}function K(){this[f].emitClose()}function U(e,t){this[f].emit("message",e,t)}function X(e){const t=this[f];t._autoPong&&t.pong(e,!this._isServer,A),t.emit("ping",e)}function Q(e){this[f].emit("pong",e)}function J(e){e.resume()}function $(){const e=this[f];let t;this.removeListener("close",$),this.removeListener("data",Y),this.removeListener("end",j),e._readyState=R.CLOSING,this._readableState.endEmitted||e._closeFrameReceived||e._receiver._writableState.errorEmitted||null===(t=e._socket.read())||e._receiver.write(t),e._receiver.end(),this[f]=void 0,clearTimeout(e._closeTimer),e._receiver._writableState.finished||e._receiver._writableState.errorEmitted?e.emitClose():(e._receiver.on("error",K),e._receiver.on("finish",K))}function Y(e){this[f]._receiver.write(e)||this.pause()}function j(){const e=this[f];e._readyState=R.CLOSING,e._receiver.end(),this.end()}function q(){const e=this[f];this.removeListener("error",q),this.on("error",A),e&&(e._readyState=R.CLOSING,this.destroy())}Object.defineProperty(R,"CONNECTING",{enumerable:!0,value:m.indexOf("CONNECTING")}),Object.defineProperty(R.prototype,"CONNECTING",{enumerable:!0,value:m.indexOf("CONNECTING")}),Object.defineProperty(R,"OPEN",{enumerable:!0,value:m.indexOf("OPEN")}),Object.defineProperty(R.prototype,"OPEN",{enumerable:!0,value:m.indexOf("OPEN")}),Object.defineProperty(R,"CLOSING",{enumerable:!0,value:m.indexOf("CLOSING")}),Object.defineProperty(R.prototype,"CLOSING",{enumerable:!0,value:m.indexOf("CLOSING")}),Object.defineProperty(R,"CLOSED",{enumerable:!0,value:m.indexOf("CLOSED")}),Object.defineProperty(R.prototype,"CLOSED",{enumerable:!0,value:m.indexOf("CLOSED")}),["binaryType","bufferedAmount","extensions","isPaused","protocol","readyState","url"].forEach((e=>{Object.defineProperty(R.prototype,e,{enumerable:!0})})),["open","error","close","message"].forEach((e=>{Object.defineProperty(R.prototype,`on${e}`,{enumerable:!0,get(){for(const t of this.listeners(e))if(t[d])return t[N];return null},set(t){for(const t of this.listeners(e))if(t[d]){this.removeListener(e,t);break}"function"==typeof t&&this.addEventListener(e,t,{[d]:!0})}})})),R.prototype.addEventListener=G,R.prototype.removeEventListener=_,e.exports=R},300:e=>{e.exports=require("buffer")},113:e=>{e.exports=require("crypto")},361:e=>{e.exports=require("events")},685:e=>{e.exports=require("http")},687:e=>{e.exports=require("https")},808:e=>{e.exports=require("net")},781:e=>{e.exports=require("stream")},404:e=>{e.exports=require("tls")},310:e=>{e.exports=require("url")},796:e=>{e.exports=require("zlib")}},t={};function s(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}(()=>{s(254),s(126),s(282);var e=s(545);s(133);const t=e,r=require("fs");let i=null;r.existsSync("./websocket/")||r.mkdirSync("./websocket/"),function e(){i=new t("wss://iboard-pushstream.ssi.com.vn/realtime"),i.on("open",(function(){console.log("WebSocket connection established"),i.send('{"type":"sub","topic":"serverName"}'),i.send('{"type":"sub","topic":"systemStatusChanged"}'),i.send('{"type":"init"}'),i.send('{"type":"sub","topic":"matchedVolByPriceV2","variables":["AAA","AAM","AAT","ABR","ABS","ABT","ACB","ACC","ACG","ACL","ADG","ADP","ADS","AGG","AGM","AGR","ANV","APC","APG","APH","ASG","ASM","ASP","AST","BAF","BBC","BCE","BCG","BCM","BFC","BHN","BIC","BID","BKG","BMC","BMI","BMP","BRC","BSI","BTP","BTT","BVH","BWE","C32","C47","CAV","CCI","CCL","CDC","CHP","CIG","CII","CKG","CLC","CLL","CLW","CMG","CMV","CMX","CNG","COM","CRC","CRE","CSM","CSV","CTD","CTF","CTG","CTI","CTR","CTS","CVT","D2D","DAG","DAH","DAT","DBC","DBD","DBT","DC4","DCL","DCM","DGC","DGW","DHA","DHC","DHG","DHM","DIG","DLG","DMC","DPG","DPM","DPR","DQC","DRC","DRH","DRL","DSN","DTA","DTL","DTT","DVP","DXG","DXS","DXV","EIB","ELC","EVE","EVF","EVG","FCM","FCN","FDC","FIR","FIT","FMC","FPT","FRT","FTS","GAS","GDT","GEG","GEX","GIL","GMC","GMD","GMH","GSP","GTA","GVR","HAG","HAH","HAP","HAR","HAS","HAX","HBC","HCD","HCM","HDB","HDC","HDG","HHP","HHS","HHV","HID","HII","HMC","HNG","HPG","HPX","HQC","HRC","HSG","HSL","HT1","HTI","HTL","HTN","HTV","HU1","HUB","HVH","HVN","HVX","IBC","ICT","IDI","IJC","ILB","IMP","ITA","ITC","ITD","JVC","KBC","KDC","KDH","KHG","KHP","KMR","KOS","KPF","KSB","L10","LAF","LBM","LCG","LDG","LEC","LGC","LGL","LHG","LIX","LM8","LPB","LSS","MBB","MCP","MDG","MHC","MIG","MSB","MSH","MSN","MWG","NAF","NAV","NBB","NCT","NHA","NHH","NHT","NKG","NLG","NNC","NO1","NSC","NT2","NTL","NVL","NVT","OCB","OGC","OPC","ORS","PAC","PAN","PC1","PDN","PDR","PET","PGC","PGD","PGI","PGV","PHC","PHR","PIT","PJT","PLP","PLX","PMG","PNC","PNJ","POM","POW","PPC","PSH","PTB","PTC","PTL","PVD","PVP","PVT","QBS","QCG","RAL","RDP","REE","S4A","SAB","SAM","SAV","SBA","SBT","SBV","SC5","SCD","SCR","SCS","SFC","SFG","SFI","SGN","SGR","SGT","SHA","SHB","SHI","SHP","SIP","SJD","SJF","SJS","SKG","SMA","SMB","SMC","SPM","SRC","SRF","SSB","SSC","SSI","ST8","STB","STG","STK","SVC","SVD","SVI","SVT","SZC","SZL","TBC","TCB","TCD","TCH","TCL","TCM","TCO","TCR","TCT","TDC","TDG","TDH","TDM","TDP","TDW","TEG","TGG","THG","TIP","TIX","TLD","TLG","TLH","TMP","TMS","TMT","TN1","TNA","TNC","TNH","TNI","TNT","TPB","TPC","TRA","TRC","TSC","TTA","TTB","TTE","TTF","TV2","TVB","TVS","TVT","TYA","UIC","VAF","VCA","VCB","VCF","VCG","VCI","VDP","VDS","VFG","VGC","VHC","VHM","VIB","VIC","VID","VIP","VIX","VJC","VMD","VND","VNE","VNG","VNL","VNM","VNS","VOS","VPB","VPD","VPG","VPH","VPI","VPS","VRC","VRE","VSC","VSH","VSI","VTB","VTO","YBM","YEG","AAV","ADC","ALT","AMC","AME","AMV","API","APS","ARM","ATS","BAB","BAX","BBS","BCC","BCF","BDB","BED","BKC","BLF","BNA","BPC","BSC","BST","BTS","BTW","BVS","BXH","C69","CAG","CAN","CAP","CCR","CDN","CEO","CET","CIA","CJC","CKV","CLH","CLM","CMC","CMS","CPC","CSC","CTB","CTC","CTP","CTT","CTX","CVN","CX8","D11","DAD","DAE","DC2","DDG","DHP","DHT","DIH","DL1","DNC","DNP","DP3","DPC","DS3","DST","DTC","DTD","DTG","DTK","DVG","DVM","DXP","DZM","EBS","ECI","EID","EVS","FID","GDW","GIC","GKM","GLT","GMA","GMX","HAD","HAT","HBS","HCC","HCT","HDA","HEV","HGM","HHC","HJS","HKT","HLC","HLD","HMH","HMR","HOM","HTC","HTP","HUT","HVT","ICG","IDC","IDJ","IDV","INC","INN","IPA","ITQ","IVS","KDM","KHS","KKC","KLF","KMT","KSD","KSF","KSQ","KST","KSV","KTS","KTT","L14","L18","L40","L43","L61","L62","LAS","LBE","LCD","LDP","LHC","LIG","MAC","MAS","MBG","MBS","MCC","MCF","MCO","MDC","MED","MEL","MHL","MIM","MKV","MST","MVB","NAG","NAP","NBC","NBP","NBW","NDN","NDX","NET","NFC","NHC","NRC","NSH","NST","NTH","NTP","NVB","OCH","ONE","PBP","PCE","PCG","PCH","PCT","PDB","PEN","PGN","PGS","PGT","PHN","PIA","PIC","PJC","PLC","PMB","PMC","PMP","PMS","POT","PPE","PPP","PPS","PPT","PPY","PRC","PRE","PSC","PSD","PSE","PSI","PSW","PTD","PTI","PTS","PV2","PVB","PVC","PVG","PVI","PVS","QHD","QST","QTC","RCL","S55","S99","SAF","SCG","SCI","SD5","SD6","SD9","SDA","SDC","SDG","SDN","SDT","SDU","SEB","SED","SFN","SGC","SGD","SGH","SHE","SHN","SHS","SJ1","SJE","SLS","SMN","SMT","SPC","SPI","SRA","SSM","STC","STP","SVN","SZB","TA9","TAR","TBX","TC6","TDN","TDT","TET","TFC","THB","THD","THS","THT","TIG","TJC","TKC","TKG","TKU","TMB","TMC","TMX","TNG","TOT","TPH","TPP","TSB","TTC","TTH","TTL","TTT","TTZ","TV3","TV4","TVC","TVD","TXM","UNI","V12","V21","VBC","VC1","VC2","VC3","VC6","VC7","VC9","VCC","VCM","VCS","VDL","VE1","VE3","VE4","VE8","VFS","VGP","VGS","VHE","VHL","VIF","VIG","VIT","VLA","VMC","VMS","VNC","VNF","VNR","VNT","VSA","VSM","VTC","VTH","VTJ","VTV","VTZ","WCS","WSS","X20","A32","AAS","ABB","ABC","ABI","ABW","ACE","ACM","ACS","ACV","AFX","AG1","AGF","AGP","AGX","AIC","ALV","AMD","AMP","AMS","ANT","APF","APL","APP","APT","ART","ASA","ATA","ATB","ATG","AVC","AVF","B82","BAL","BBH","BBM","BBT","BCA","BCB","BCP","BCV","BDG","BDT","BDW","BEL","BGW","BHA","BHC","BHG","BHI","BHK","BHP","BIG","BII","BIO","BLI","BLN","BLT","BLW","BMD","BMF","BMG","BMJ","BMN","BMS","BMV","BNW","BOT","BQB","BRR","BRS","BSA","BSD","BSG","BSH","BSL","BSP","BSQ","BSR","BT1","BT6","BTB","BTD","BTG","BTH","BTN","BTU","BTV","BVB","BVG","BVL","BVN","BWA","BWS","C12","C21","C22","C4G","C92","CAB","CAD","CAR","CAT","CBI","CBS","CC1","CC4","CCA","CCM","CCP","CCT","CCV","CDG","CDH","CDO","CDP","CDR","CE1","CEG","CEN","CFM","CFV","CGV","CH5","CHC","CHS","CI5","CID","CIP","CK8","CKA","CKD","CLG","CLX","CMD","CMF","CMI","CMK","CMM","CMN","CMP","CMT","CMW","CNA","CNC","CNN","CNT","CPA","CPH","CPI","CQN","CQT","CSI","CST","CT3","CT6","CTA","CTN","CTW","CYC","DAC","DAN","DAS","DBM","DC1","DCF","DCG","DCH","DCR","DCS","DCT","DDH","DDM","DDN","DDV","DFC","DFF","DGT","DHB","DHD","DHN","DIC","DID","DKC","DLD","DLM","DLR","DLT","DM7","DMN","DMS","DNA","DND","DNE","DNH","DNL","DNM","DNN","DNT","DNW","DOC","DOP","DP1","DP2","DPH","DPP","DPS","DRG","DRI","DSC","DSD","DSG","DSP","DSV","DTB","DTE","DTH","DTI","DTP","DTV","DUS","DVC","DVN","DVW","DWC","DWS","DXL","E12","E29","EFI","EIC","EIN","EME","EMG","EMS","EPC","EPH","FBA","FBC","FCC","FCS","FGL","FHN","FHS","FIC","FLC","FOC","FOX","FRC","FRM","FSO","FT1","FTI","FTM","G20","G36","GAB","GCB","GCF","GDA","GEE","GER","GGG","GH3","GHC","GLC","GLW","GND","GPC","GSM","GTD","GTS","GTT","GVT","H11","HAC","HAF","HAI","HAM","HAN","HAV","HBD","HBH","HC1","HC3","HCB","HCI","HD2","HD6","HD8","HDM","HDO","HDP","HDW","HEC","HEJ","HEM","HEP","HES","HFB","HFC","HFX","HGT","HGW","HHG","HHN","HHR","HIG","HJC","HKB","HLA","HLB","HLR","HLS","HLT","HLY","HMG","HMS","HNA","HNB","HND","HNF","HNI","HNM","HNP","HNR","HOT","HPB","HPD","HPH","HPI","HPM","HPP","HPT","HPW","HRB","HRT","HSA","HSI","HSM","HSP","HSV","HTE","HTG","HTM","HTT","HU3","HU4","HU6","HUG","HVA","HVG","HWS","IBD","ICC","ICF","ICI","ICN","IDP","IFS","IHK","ILA","ILC","ILS","IME","IN4","IRC","ISG","ISH","IST","ITS","JOS","KAC","KCB","KCE","KGM","KHD","KHL","KHW","KIP","KLB","KLM","KSH","KTC","KTL","KVC","L12","L35","L44","L45","L63","LAI","LAW","LBC","LCC","LCM","LCS","LDW","LG9","LGM","LIC","LKW","LLM","LM3","LM7","LMC","LMH","LMI","LNC","LO5","LPT","LQN","LSG","LTC","LTG","LUT","M10","MA1","MBN","MCD","MCG","MCH","MCM","MDA","MDF","MEC","MEF","MES","MFS","MGC","MGG","MGR","MH3","MIC","MIE","MKP","MLC","MLS","MML","MNB","MND","MPC","MPT","MPY","MQB","MQN","MRF","MSR","MTA","MTB","MTC","MTG","MTH","MTL","MTP","MTS","MTV","MVC","MVN","NAB","NAC","NAS","NAU","NAW","NBE","NBT","NCS","ND2","NDC","NDF","NDP","NDT","NDW","NED","NGC","NHP","NHV","NJC","NLS","NNT","NOS","NQB","NQN","NQT","NS2","NSG","NSL","NSS","NTB","NTC","NTF","NTT","NTW","NUE","NVP","NWT","NXT","ODE","OIL","ONW","PAI","PAP","PAS","PAT","PBC","PBT","PCC","PCF","PCM","PCN","PDC","PDV","PEC","PEG","PEQ","PFL","PGB","PHH","PHP","PHS","PID","PIS","PIV","PJS","PLA","PLE","PLO","PMJ","PMT","PMW","PND","PNG","PNP","PNT","POB","POS","POV","PPH","PPI","PQN","PRO","PRT","PSB","PSG","PSL","PSN","PSP","PTE","PTG","PTH","PTN","PTO","PTP","PTT","PTV","PTX","PVA","PVE","PVH","PVL","PVM","PVO","PVR","PVV","PVX","PVY","PWA","PWS","PX1","PXA","PXC","PXI","PXL","PXM","PXS","PXT","QCC","QHW","QNC","QNS","QNT","QNU","QNW","QPH","QSP","QTP","RAT","RBC","RCC","RCD","RGC","RIC","RTB","S12","S27","S72","S74","S96","SAC","SAL","SAP","SAS","SB1","SBD","SBH","SBL","SBM","SBR","SBS","SCC","SCJ","SCL","SCO","SCY","SD1","SD2","SD3","SD4","SD7","SD8","SDB","SDD","SDJ","SDK","SDP","SDV","SDX","SDY","SEA","SEP","SGB","SGI","SGO","SGP","SGS","SHC","SHG","SHX","SID","SIG","SII","SIV","SJC","SJG","SJM","SKH","SKN","SKV","SNC","SNZ","SP2","SPB","SPD","SPH","SPV","SQC","SRB","SRT","SSF","SSG","SSH","SSN","STH","STL","STS","STT","STW","SVG","SVH","SWC","SZE","SZG","TA3","TA6","TAN","TAW","TB8","TBD","TBH","TBR","TBT","TCI","TCJ","TCK","TCW","TDB","TDF","TDS","TED","TEL","TGP","TH1","THN","THP","THU","THW","TID","TIE","TIN","TIS","TKA","TL4","TLI","TLP","TLT","TMG","TMW","TNB","TNM","TNP","TNS","TNW","TOP","TOS","TOW","TPS","TQN","TQW","TR1","TRS","TRT","TS3","TS4","TSD","TSG","TSJ","TST","TTD","TTG","TTN","TTP","TTS","TUG","TV1","TV6","TVA","TVG","TVH","TVM","TVN","TVP","TW3","UCT","UDC","UDJ","UDL","UEM","UMC","UPC","UPH","USC","USD","V11","V15","VAB","VAV","VBB","VBG","VBH","VC5","VCE","VCP","VCR","VCT","VCW","VCX","VDB","VDN","VDT","VE2","VE9","VEA","VEC","VEF","VES","VET","VFC","VFR","VGG","VGI","VGL","VGR","VGT","VGV","VHD","VHF","VHG","VHH","VIE","VIH","VIM","VIN","VIR","VIW","VKC","VKP","VLB","VLC","VLF","VLG","VLP","VLW","VMA","VMG","VMT","VNA","VNB","VNH","VNI","VNP","VNX","VNY","VNZ","VOC","VPA","VPC","VPR","VPW","VQC","VRG","VSE","VSF","VSG","VSN","VST","VTA","VTD","VTE","VTG","VTI","VTK","VTL","VTM","VTP","VTQ","VTR","VTS","VTX","VUA","VVN","VVS","VW3","VWS","VXB","VXP","VXT","WSB","WTC","X26","X77","XDC","XDH","XHC","XLV","XMC","XMD","XMP","XPH","YBC","YTC"]}'),i.send('{"type":"sub","topic":"leTableAddV2","variables":["AAA","AAM","AAT","ABR","ABS","ABT","ACB","ACC","ACG","ACL","ADG","ADP","ADS","AGG","AGM","AGR","ANV","APC","APG","APH","ASG","ASM","ASP","AST","BAF","BBC","BCE","BCG","BCM","BFC","BHN","BIC","BID","BKG","BMC","BMI","BMP","BRC","BSI","BTP","BTT","BVH","BWE","C32","C47","CAV","CCI","CCL","CDC","CHP","CIG","CII","CKG","CLC","CLL","CLW","CMG","CMV","CMX","CNG","COM","CRC","CRE","CSM","CSV","CTD","CTF","CTG","CTI","CTR","CTS","CVT","D2D","DAG","DAH","DAT","DBC","DBD","DBT","DC4","DCL","DCM","DGC","DGW","DHA","DHC","DHG","DHM","DIG","DLG","DMC","DPG","DPM","DPR","DQC","DRC","DRH","DRL","DSN","DTA","DTL","DTT","DVP","DXG","DXS","DXV","EIB","ELC","EVE","EVF","EVG","FCM","FCN","FDC","FIR","FIT","FMC","FPT","FRT","FTS","GAS","GDT","GEG","GEX","GIL","GMC","GMD","GMH","GSP","GTA","GVR","HAG","HAH","HAP","HAR","HAS","HAX","HBC","HCD","HCM","HDB","HDC","HDG","HHP","HHS","HHV","HID","HII","HMC","HNG","HPG","HPX","HQC","HRC","HSG","HSL","HT1","HTI","HTL","HTN","HTV","HU1","HUB","HVH","HVN","HVX","IBC","ICT","IDI","IJC","ILB","IMP","ITA","ITC","ITD","JVC","KBC","KDC","KDH","KHG","KHP","KMR","KOS","KPF","KSB","L10","LAF","LBM","LCG","LDG","LEC","LGC","LGL","LHG","LIX","LM8","LPB","LSS","MBB","MCP","MDG","MHC","MIG","MSB","MSH","MSN","MWG","NAF","NAV","NBB","NCT","NHA","NHH","NHT","NKG","NLG","NNC","NO1","NSC","NT2","NTL","NVL","NVT","OCB","OGC","OPC","ORS","PAC","PAN","PC1","PDN","PDR","PET","PGC","PGD","PGI","PGV","PHC","PHR","PIT","PJT","PLP","PLX","PMG","PNC","PNJ","POM","POW","PPC","PSH","PTB","PTC","PTL","PVD","PVP","PVT","QBS","QCG","RAL","RDP","REE","S4A","SAB","SAM","SAV","SBA","SBT","SBV","SC5","SCD","SCR","SCS","SFC","SFG","SFI","SGN","SGR","SGT","SHA","SHB","SHI","SHP","SIP","SJD","SJF","SJS","SKG","SMA","SMB","SMC","SPM","SRC","SRF","SSB","SSC","SSI","ST8","STB","STG","STK","SVC","SVD","SVI","SVT","SZC","SZL","TBC","TCB","TCD","TCH","TCL","TCM","TCO","TCR","TCT","TDC","TDG","TDH","TDM","TDP","TDW","TEG","TGG","THG","TIP","TIX","TLD","TLG","TLH","TMP","TMS","TMT","TN1","TNA","TNC","TNH","TNI","TNT","TPB","TPC","TRA","TRC","TSC","TTA","TTB","TTE","TTF","TV2","TVB","TVS","TVT","TYA","UIC","VAF","VCA","VCB","VCF","VCG","VCI","VDP","VDS","VFG","VGC","VHC","VHM","VIB","VIC","VID","VIP","VIX","VJC","VMD","VND","VNE","VNG","VNL","VNM","VNS","VOS","VPB","VPD","VPG","VPH","VPI","VPS","VRC","VRE","VSC","VSH","VSI","VTB","VTO","YBM","YEG","AAV","ADC","ALT","AMC","AME","AMV","API","APS","ARM","ATS","BAB","BAX","BBS","BCC","BCF","BDB","BED","BKC","BLF","BNA","BPC","BSC","BST","BTS","BTW","BVS","BXH","C69","CAG","CAN","CAP","CCR","CDN","CEO","CET","CIA","CJC","CKV","CLH","CLM","CMC","CMS","CPC","CSC","CTB","CTC","CTP","CTT","CTX","CVN","CX8","D11","DAD","DAE","DC2","DDG","DHP","DHT","DIH","DL1","DNC","DNP","DP3","DPC","DS3","DST","DTC","DTD","DTG","DTK","DVG","DVM","DXP","DZM","EBS","ECI","EID","EVS","FID","GDW","GIC","GKM","GLT","GMA","GMX","HAD","HAT","HBS","HCC","HCT","HDA","HEV","HGM","HHC","HJS","HKT","HLC","HLD","HMH","HMR","HOM","HTC","HTP","HUT","HVT","ICG","IDC","IDJ","IDV","INC","INN","IPA","ITQ","IVS","KDM","KHS","KKC","KLF","KMT","KSD","KSF","KSQ","KST","KSV","KTS","KTT","L14","L18","L40","L43","L61","L62","LAS","LBE","LCD","LDP","LHC","LIG","MAC","MAS","MBG","MBS","MCC","MCF","MCO","MDC","MED","MEL","MHL","MIM","MKV","MST","MVB","NAG","NAP","NBC","NBP","NBW","NDN","NDX","NET","NFC","NHC","NRC","NSH","NST","NTH","NTP","NVB","OCH","ONE","PBP","PCE","PCG","PCH","PCT","PDB","PEN","PGN","PGS","PGT","PHN","PIA","PIC","PJC","PLC","PMB","PMC","PMP","PMS","POT","PPE","PPP","PPS","PPT","PPY","PRC","PRE","PSC","PSD","PSE","PSI","PSW","PTD","PTI","PTS","PV2","PVB","PVC","PVG","PVI","PVS","QHD","QST","QTC","RCL","S55","S99","SAF","SCG","SCI","SD5","SD6","SD9","SDA","SDC","SDG","SDN","SDT","SDU","SEB","SED","SFN","SGC","SGD","SGH","SHE","SHN","SHS","SJ1","SJE","SLS","SMN","SMT","SPC","SPI","SRA","SSM","STC","STP","SVN","SZB","TA9","TAR","TBX","TC6","TDN","TDT","TET","TFC","THB","THD","THS","THT","TIG","TJC","TKC","TKG","TKU","TMB","TMC","TMX","TNG","TOT","TPH","TPP","TSB","TTC","TTH","TTL","TTT","TTZ","TV3","TV4","TVC","TVD","TXM","UNI","V12","V21","VBC","VC1","VC2","VC3","VC6","VC7","VC9","VCC","VCM","VCS","VDL","VE1","VE3","VE4","VE8","VFS","VGP","VGS","VHE","VHL","VIF","VIG","VIT","VLA","VMC","VMS","VNC","VNF","VNR","VNT","VSA","VSM","VTC","VTH","VTJ","VTV","VTZ","WCS","WSS","X20","A32","AAS","ABB","ABC","ABI","ABW","ACE","ACM","ACS","ACV","AFX","AG1","AGF","AGP","AGX","AIC","ALV","AMD","AMP","AMS","ANT","APF","APL","APP","APT","ART","ASA","ATA","ATB","ATG","AVC","AVF","B82","BAL","BBH","BBM","BBT","BCA","BCB","BCP","BCV","BDG","BDT","BDW","BEL","BGW","BHA","BHC","BHG","BHI","BHK","BHP","BIG","BII","BIO","BLI","BLN","BLT","BLW","BMD","BMF","BMG","BMJ","BMN","BMS","BMV","BNW","BOT","BQB","BRR","BRS","BSA","BSD","BSG","BSH","BSL","BSP","BSQ","BSR","BT1","BT6","BTB","BTD","BTG","BTH","BTN","BTU","BTV","BVB","BVG","BVL","BVN","BWA","BWS","C12","C21","C22","C4G","C92","CAB","CAD","CAR","CAT","CBI","CBS","CC1","CC4","CCA","CCM","CCP","CCT","CCV","CDG","CDH","CDO","CDP","CDR","CE1","CEG","CEN","CFM","CFV","CGV","CH5","CHC","CHS","CI5","CID","CIP","CK8","CKA","CKD","CLG","CLX","CMD","CMF","CMI","CMK","CMM","CMN","CMP","CMT","CMW","CNA","CNC","CNN","CNT","CPA","CPH","CPI","CQN","CQT","CSI","CST","CT3","CT6","CTA","CTN","CTW","CYC","DAC","DAN","DAS","DBM","DC1","DCF","DCG","DCH","DCR","DCS","DCT","DDH","DDM","DDN","DDV","DFC","DFF","DGT","DHB","DHD","DHN","DIC","DID","DKC","DLD","DLM","DLR","DLT","DM7","DMN","DMS","DNA","DND","DNE","DNH","DNL","DNM","DNN","DNT","DNW","DOC","DOP","DP1","DP2","DPH","DPP","DPS","DRG","DRI","DSC","DSD","DSG","DSP","DSV","DTB","DTE","DTH","DTI","DTP","DTV","DUS","DVC","DVN","DVW","DWC","DWS","DXL","E12","E29","EFI","EIC","EIN","EME","EMG","EMS","EPC","EPH","FBA","FBC","FCC","FCS","FGL","FHN","FHS","FIC","FLC","FOC","FOX","FRC","FRM","FSO","FT1","FTI","FTM","G20","G36","GAB","GCB","GCF","GDA","GEE","GER","GGG","GH3","GHC","GLC","GLW","GND","GPC","GSM","GTD","GTS","GTT","GVT","H11","HAC","HAF","HAI","HAM","HAN","HAV","HBD","HBH","HC1","HC3","HCB","HCI","HD2","HD6","HD8","HDM","HDO","HDP","HDW","HEC","HEJ","HEM","HEP","HES","HFB","HFC","HFX","HGT","HGW","HHG","HHN","HHR","HIG","HJC","HKB","HLA","HLB","HLR","HLS","HLT","HLY","HMG","HMS","HNA","HNB","HND","HNF","HNI","HNM","HNP","HNR","HOT","HPB","HPD","HPH","HPI","HPM","HPP","HPT","HPW","HRB","HRT","HSA","HSI","HSM","HSP","HSV","HTE","HTG","HTM","HTT","HU3","HU4","HU6","HUG","HVA","HVG","HWS","IBD","ICC","ICF","ICI","ICN","IDP","IFS","IHK","ILA","ILC","ILS","IME","IN4","IRC","ISG","ISH","IST","ITS","JOS","KAC","KCB","KCE","KGM","KHD","KHL","KHW","KIP","KLB","KLM","KSH","KTC","KTL","KVC","L12","L35","L44","L45","L63","LAI","LAW","LBC","LCC","LCM","LCS","LDW","LG9","LGM","LIC","LKW","LLM","LM3","LM7","LMC","LMH","LMI","LNC","LO5","LPT","LQN","LSG","LTC","LTG","LUT","M10","MA1","MBN","MCD","MCG","MCH","MCM","MDA","MDF","MEC","MEF","MES","MFS","MGC","MGG","MGR","MH3","MIC","MIE","MKP","MLC","MLS","MML","MNB","MND","MPC","MPT","MPY","MQB","MQN","MRF","MSR","MTA","MTB","MTC","MTG","MTH","MTL","MTP","MTS","MTV","MVC","MVN","NAB","NAC","NAS","NAU","NAW","NBE","NBT","NCS","ND2","NDC","NDF","NDP","NDT","NDW","NED","NGC","NHP","NHV","NJC","NLS","NNT","NOS","NQB","NQN","NQT","NS2","NSG","NSL","NSS","NTB","NTC","NTF","NTT","NTW","NUE","NVP","NWT","NXT","ODE","OIL","ONW","PAI","PAP","PAS","PAT","PBC","PBT","PCC","PCF","PCM","PCN","PDC","PDV","PEC","PEG","PEQ","PFL","PGB","PHH","PHP","PHS","PID","PIS","PIV","PJS","PLA","PLE","PLO","PMJ","PMT","PMW","PND","PNG","PNP","PNT","POB","POS","POV","PPH","PPI","PQN","PRO","PRT","PSB","PSG","PSL","PSN","PSP","PTE","PTG","PTH","PTN","PTO","PTP","PTT","PTV","PTX","PVA","PVE","PVH","PVL","PVM","PVO","PVR","PVV","PVX","PVY","PWA","PWS","PX1","PXA","PXC","PXI","PXL","PXM","PXS","PXT","QCC","QHW","QNC","QNS","QNT","QNU","QNW","QPH","QSP","QTP","RAT","RBC","RCC","RCD","RGC","RIC","RTB","S12","S27","S72","S74","S96","SAC","SAL","SAP","SAS","SB1","SBD","SBH","SBL","SBM","SBR","SBS","SCC","SCJ","SCL","SCO","SCY","SD1","SD2","SD3","SD4","SD7","SD8","SDB","SDD","SDJ","SDK","SDP","SDV","SDX","SDY","SEA","SEP","SGB","SGI","SGO","SGP","SGS","SHC","SHG","SHX","SID","SIG","SII","SIV","SJC","SJG","SJM","SKH","SKN","SKV","SNC","SNZ","SP2","SPB","SPD","SPH","SPV","SQC","SRB","SRT","SSF","SSG","SSH","SSN","STH","STL","STS","STT","STW","SVG","SVH","SWC","SZE","SZG","TA3","TA6","TAN","TAW","TB8","TBD","TBH","TBR","TBT","TCI","TCJ","TCK","TCW","TDB","TDF","TDS","TED","TEL","TGP","TH1","THN","THP","THU","THW","TID","TIE","TIN","TIS","TKA","TL4","TLI","TLP","TLT","TMG","TMW","TNB","TNM","TNP","TNS","TNW","TOP","TOS","TOW","TPS","TQN","TQW","TR1","TRS","TRT","TS3","TS4","TSD","TSG","TSJ","TST","TTD","TTG","TTN","TTP","TTS","TUG","TV1","TV6","TVA","TVG","TVH","TVM","TVN","TVP","TW3","UCT","UDC","UDJ","UDL","UEM","UMC","UPC","UPH","USC","USD","V11","V15","VAB","VAV","VBB","VBG","VBH","VC5","VCE","VCP","VCR","VCT","VCW","VCX","VDB","VDN","VDT","VE2","VE9","VEA","VEC","VEF","VES","VET","VFC","VFR","VGG","VGI","VGL","VGR","VGT","VGV","VHD","VHF","VHG","VHH","VIE","VIH","VIM","VIN","VIR","VIW","VKC","VKP","VLB","VLC","VLF","VLG","VLP","VLW","VMA","VMG","VMT","VNA","VNB","VNH","VNI","VNP","VNX","VNY","VNZ","VOC","VPA","VPC","VPR","VPW","VQC","VRG","VSE","VSF","VSG","VSN","VST","VTA","VTD","VTE","VTG","VTI","VTK","VTL","VTM","VTP","VTQ","VTR","VTS","VTX","VUA","VVN","VVS","VW3","VWS","VXB","VXP","VXT","WSB","WTC","X26","X77","XDC","XDH","XHC","XLV","XMC","XMD","XMP","XPH","YBC","YTC"]}'),i.send('{"type":"sub","topic":"stockRealtimeByListV2","variables":["AAA","AAM","AAT","ABR","ABS","ABT","ACB","ACC","ACG","ACL","ADG","ADP","ADS","AGG","AGM","AGR","ANV","APC","APG","APH","ASG","ASM","ASP","AST","BAF","BBC","BCE","BCG","BCM","BFC","BHN","BIC","BID","BKG","BMC","BMI","BMP","BRC","BSI","BTP","BTT","BVH","BWE","C32","C47","CAV","CCI","CCL","CDC","CHP","CIG","CII","CKG","CLC","CLL","CLW","CMG","CMV","CMX","CNG","COM","CRC","CRE","CSM","CSV","CTD","CTF","CTG","CTI","CTR","CTS","CVT","D2D","DAG","DAH","DAT","DBC","DBD","DBT","DC4","DCL","DCM","DGC","DGW","DHA","DHC","DHG","DHM","DIG","DLG","DMC","DPG","DPM","DPR","DQC","DRC","DRH","DRL","DSN","DTA","DTL","DTT","DVP","DXG","DXS","DXV","EIB","ELC","EVE","EVF","EVG","FCM","FCN","FDC","FIR","FIT","FMC","FPT","FRT","FTS","GAS","GDT","GEG","GEX","GIL","GMC","GMD","GMH","GSP","GTA","GVR","HAG","HAH","HAP","HAR","HAS","HAX","HBC","HCD","HCM","HDB","HDC","HDG","HHP","HHS","HHV","HID","HII","HMC","HNG","HPG","HPX","HQC","HRC","HSG","HSL","HT1","HTI","HTL","HTN","HTV","HU1","HUB","HVH","HVN","HVX","IBC","ICT","IDI","IJC","ILB","IMP","ITA","ITC","ITD","JVC","KBC","KDC","KDH","KHG","KHP","KMR","KOS","KPF","KSB","L10","LAF","LBM","LCG","LDG","LEC","LGC","LGL","LHG","LIX","LM8","LPB","LSS","MBB","MCP","MDG","MHC","MIG","MSB","MSH","MSN","MWG","NAF","NAV","NBB","NCT","NHA","NHH","NHT","NKG","NLG","NNC","NO1","NSC","NT2","NTL","NVL","NVT","OCB","OGC","OPC","ORS","PAC","PAN","PC1","PDN","PDR","PET","PGC","PGD","PGI","PGV","PHC","PHR","PIT","PJT","PLP","PLX","PMG","PNC","PNJ","POM","POW","PPC","PSH","PTB","PTC","PTL","PVD","PVP","PVT","QBS","QCG","RAL","RDP","REE","S4A","SAB","SAM","SAV","SBA","SBT","SBV","SC5","SCD","SCR","SCS","SFC","SFG","SFI","SGN","SGR","SGT","SHA","SHB","SHI","SHP","SIP","SJD","SJF","SJS","SKG","SMA","SMB","SMC","SPM","SRC","SRF","SSB","SSC","SSI","ST8","STB","STG","STK","SVC","SVD","SVI","SVT","SZC","SZL","TBC","TCB","TCD","TCH","TCL","TCM","TCO","TCR","TCT","TDC","TDG","TDH","TDM","TDP","TDW","TEG","TGG","THG","TIP","TIX","TLD","TLG","TLH","TMP","TMS","TMT","TN1","TNA","TNC","TNH","TNI","TNT","TPB","TPC","TRA","TRC","TSC","TTA","TTB","TTE","TTF","TV2","TVB","TVS","TVT","TYA","UIC","VAF","VCA","VCB","VCF","VCG","VCI","VDP","VDS","VFG","VGC","VHC","VHM","VIB","VIC","VID","VIP","VIX","VJC","VMD","VND","VNE","VNG","VNL","VNM","VNS","VOS","VPB","VPD","VPG","VPH","VPI","VPS","VRC","VRE","VSC","VSH","VSI","VTB","VTO","YBM","YEG","AAV","ADC","ALT","AMC","AME","AMV","API","APS","ARM","ATS","BAB","BAX","BBS","BCC","BCF","BDB","BED","BKC","BLF","BNA","BPC","BSC","BST","BTS","BTW","BVS","BXH","C69","CAG","CAN","CAP","CCR","CDN","CEO","CET","CIA","CJC","CKV","CLH","CLM","CMC","CMS","CPC","CSC","CTB","CTC","CTP","CTT","CTX","CVN","CX8","D11","DAD","DAE","DC2","DDG","DHP","DHT","DIH","DL1","DNC","DNP","DP3","DPC","DS3","DST","DTC","DTD","DTG","DTK","DVG","DVM","DXP","DZM","EBS","ECI","EID","EVS","FID","GDW","GIC","GKM","GLT","GMA","GMX","HAD","HAT","HBS","HCC","HCT","HDA","HEV","HGM","HHC","HJS","HKT","HLC","HLD","HMH","HMR","HOM","HTC","HTP","HUT","HVT","ICG","IDC","IDJ","IDV","INC","INN","IPA","ITQ","IVS","KDM","KHS","KKC","KLF","KMT","KSD","KSF","KSQ","KST","KSV","KTS","KTT","L14","L18","L40","L43","L61","L62","LAS","LBE","LCD","LDP","LHC","LIG","MAC","MAS","MBG","MBS","MCC","MCF","MCO","MDC","MED","MEL","MHL","MIM","MKV","MST","MVB","NAG","NAP","NBC","NBP","NBW","NDN","NDX","NET","NFC","NHC","NRC","NSH","NST","NTH","NTP","NVB","OCH","ONE","PBP","PCE","PCG","PCH","PCT","PDB","PEN","PGN","PGS","PGT","PHN","PIA","PIC","PJC","PLC","PMB","PMC","PMP","PMS","POT","PPE","PPP","PPS","PPT","PPY","PRC","PRE","PSC","PSD","PSE","PSI","PSW","PTD","PTI","PTS","PV2","PVB","PVC","PVG","PVI","PVS","QHD","QST","QTC","RCL","S55","S99","SAF","SCG","SCI","SD5","SD6","SD9","SDA","SDC","SDG","SDN","SDT","SDU","SEB","SED","SFN","SGC","SGD","SGH","SHE","SHN","SHS","SJ1","SJE","SLS","SMN","SMT","SPC","SPI","SRA","SSM","STC","STP","SVN","SZB","TA9","TAR","TBX","TC6","TDN","TDT","TET","TFC","THB","THD","THS","THT","TIG","TJC","TKC","TKG","TKU","TMB","TMC","TMX","TNG","TOT","TPH","TPP","TSB","TTC","TTH","TTL","TTT","TTZ","TV3","TV4","TVC","TVD","TXM","UNI","V12","V21","VBC","VC1","VC2","VC3","VC6","VC7","VC9","VCC","VCM","VCS","VDL","VE1","VE3","VE4","VE8","VFS","VGP","VGS","VHE","VHL","VIF","VIG","VIT","VLA","VMC","VMS","VNC","VNF","VNR","VNT","VSA","VSM","VTC","VTH","VTJ","VTV","VTZ","WCS","WSS","X20","A32","AAS","ABB","ABC","ABI","ABW","ACE","ACM","ACS","ACV","AFX","AG1","AGF","AGP","AGX","AIC","ALV","AMD","AMP","AMS","ANT","APF","APL","APP","APT","ART","ASA","ATA","ATB","ATG","AVC","AVF","B82","BAL","BBH","BBM","BBT","BCA","BCB","BCP","BCV","BDG","BDT","BDW","BEL","BGW","BHA","BHC","BHG","BHI","BHK","BHP","BIG","BII","BIO","BLI","BLN","BLT","BLW","BMD","BMF","BMG","BMJ","BMN","BMS","BMV","BNW","BOT","BQB","BRR","BRS","BSA","BSD","BSG","BSH","BSL","BSP","BSQ","BSR","BT1","BT6","BTB","BTD","BTG","BTH","BTN","BTU","BTV","BVB","BVG","BVL","BVN","BWA","BWS","C12","C21","C22","C4G","C92","CAB","CAD","CAR","CAT","CBI","CBS","CC1","CC4","CCA","CCM","CCP","CCT","CCV","CDG","CDH","CDO","CDP","CDR","CE1","CEG","CEN","CFM","CFV","CGV","CH5","CHC","CHS","CI5","CID","CIP","CK8","CKA","CKD","CLG","CLX","CMD","CMF","CMI","CMK","CMM","CMN","CMP","CMT","CMW","CNA","CNC","CNN","CNT","CPA","CPH","CPI","CQN","CQT","CSI","CST","CT3","CT6","CTA","CTN","CTW","CYC","DAC","DAN","DAS","DBM","DC1","DCF","DCG","DCH","DCR","DCS","DCT","DDH","DDM","DDN","DDV","DFC","DFF","DGT","DHB","DHD","DHN","DIC","DID","DKC","DLD","DLM","DLR","DLT","DM7","DMN","DMS","DNA","DND","DNE","DNH","DNL","DNM","DNN","DNT","DNW","DOC","DOP","DP1","DP2","DPH","DPP","DPS","DRG","DRI","DSC","DSD","DSG","DSP","DSV","DTB","DTE","DTH","DTI","DTP","DTV","DUS","DVC","DVN","DVW","DWC","DWS","DXL","E12","E29","EFI","EIC","EIN","EME","EMG","EMS","EPC","EPH","FBA","FBC","FCC","FCS","FGL","FHN","FHS","FIC","FLC","FOC","FOX","FRC","FRM","FSO","FT1","FTI","FTM","G20","G36","GAB","GCB","GCF","GDA","GEE","GER","GGG","GH3","GHC","GLC","GLW","GND","GPC","GSM","GTD","GTS","GTT","GVT","H11","HAC","HAF","HAI","HAM","HAN","HAV","HBD","HBH","HC1","HC3","HCB","HCI","HD2","HD6","HD8","HDM","HDO","HDP","HDW","HEC","HEJ","HEM","HEP","HES","HFB","HFC","HFX","HGT","HGW","HHG","HHN","HHR","HIG","HJC","HKB","HLA","HLB","HLR","HLS","HLT","HLY","HMG","HMS","HNA","HNB","HND","HNF","HNI","HNM","HNP","HNR","HOT","HPB","HPD","HPH","HPI","HPM","HPP","HPT","HPW","HRB","HRT","HSA","HSI","HSM","HSP","HSV","HTE","HTG","HTM","HTT","HU3","HU4","HU6","HUG","HVA","HVG","HWS","IBD","ICC","ICF","ICI","ICN","IDP","IFS","IHK","ILA","ILC","ILS","IME","IN4","IRC","ISG","ISH","IST","ITS","JOS","KAC","KCB","KCE","KGM","KHD","KHL","KHW","KIP","KLB","KLM","KSH","KTC","KTL","KVC","L12","L35","L44","L45","L63","LAI","LAW","LBC","LCC","LCM","LCS","LDW","LG9","LGM","LIC","LKW","LLM","LM3","LM7","LMC","LMH","LMI","LNC","LO5","LPT","LQN","LSG","LTC","LTG","LUT","M10","MA1","MBN","MCD","MCG","MCH","MCM","MDA","MDF","MEC","MEF","MES","MFS","MGC","MGG","MGR","MH3","MIC","MIE","MKP","MLC","MLS","MML","MNB","MND","MPC","MPT","MPY","MQB","MQN","MRF","MSR","MTA","MTB","MTC","MTG","MTH","MTL","MTP","MTS","MTV","MVC","MVN","NAB","NAC","NAS","NAU","NAW","NBE","NBT","NCS","ND2","NDC","NDF","NDP","NDT","NDW","NED","NGC","NHP","NHV","NJC","NLS","NNT","NOS","NQB","NQN","NQT","NS2","NSG","NSL","NSS","NTB","NTC","NTF","NTT","NTW","NUE","NVP","NWT","NXT","ODE","OIL","ONW","PAI","PAP","PAS","PAT","PBC","PBT","PCC","PCF","PCM","PCN","PDC","PDV","PEC","PEG","PEQ","PFL","PGB","PHH","PHP","PHS","PID","PIS","PIV","PJS","PLA","PLE","PLO","PMJ","PMT","PMW","PND","PNG","PNP","PNT","POB","POS","POV","PPH","PPI","PQN","PRO","PRT","PSB","PSG","PSL","PSN","PSP","PTE","PTG","PTH","PTN","PTO","PTP","PTT","PTV","PTX","PVA","PVE","PVH","PVL","PVM","PVO","PVR","PVV","PVX","PVY","PWA","PWS","PX1","PXA","PXC","PXI","PXL","PXM","PXS","PXT","QCC","QHW","QNC","QNS","QNT","QNU","QNW","QPH","QSP","QTP","RAT","RBC","RCC","RCD","RGC","RIC","RTB","S12","S27","S72","S74","S96","SAC","SAL","SAP","SAS","SB1","SBD","SBH","SBL","SBM","SBR","SBS","SCC","SCJ","SCL","SCO","SCY","SD1","SD2","SD3","SD4","SD7","SD8","SDB","SDD","SDJ","SDK","SDP","SDV","SDX","SDY","SEA","SEP","SGB","SGI","SGO","SGP","SGS","SHC","SHG","SHX","SID","SIG","SII","SIV","SJC","SJG","SJM","SKH","SKN","SKV","SNC","SNZ","SP2","SPB","SPD","SPH","SPV","SQC","SRB","SRT","SSF","SSG","SSH","SSN","STH","STL","STS","STT","STW","SVG","SVH","SWC","SZE","SZG","TA3","TA6","TAN","TAW","TB8","TBD","TBH","TBR","TBT","TCI","TCJ","TCK","TCW","TDB","TDF","TDS","TED","TEL","TGP","TH1","THN","THP","THU","THW","TID","TIE","TIN","TIS","TKA","TL4","TLI","TLP","TLT","TMG","TMW","TNB","TNM","TNP","TNS","TNW","TOP","TOS","TOW","TPS","TQN","TQW","TR1","TRS","TRT","TS3","TS4","TSD","TSG","TSJ","TST","TTD","TTG","TTN","TTP","TTS","TUG","TV1","TV6","TVA","TVG","TVH","TVM","TVN","TVP","TW3","UCT","UDC","UDJ","UDL","UEM","UMC","UPC","UPH","USC","USD","V11","V15","VAB","VAV","VBB","VBG","VBH","VC5","VCE","VCP","VCR","VCT","VCW","VCX","VDB","VDN","VDT","VE2","VE9","VEA","VEC","VEF","VES","VET","VFC","VFR","VGG","VGI","VGL","VGR","VGT","VGV","VHD","VHF","VHG","VHH","VIE","VIH","VIM","VIN","VIR","VIW","VKC","VKP","VLB","VLC","VLF","VLG","VLP","VLW","VMA","VMG","VMT","VNA","VNB","VNH","VNI","VNP","VNX","VNY","VNZ","VOC","VPA","VPC","VPR","VPW","VQC","VRG","VSE","VSF","VSG","VSN","VST","VTA","VTD","VTE","VTG","VTI","VTK","VTL","VTM","VTP","VTQ","VTR","VTS","VTX","VUA","VVN","VVS","VW3","VWS","VXB","VXP","VXT","WSB","WTC","X26","X77","XDC","XDH","XHC","XLV","XMC","XMD","XMP","XPH","YBC","YTC"],"component":"depthChart"}'),setInterval((()=>{i.readyState===t.OPEN&&i.send('{"type":"init"}')}),3e4)})),i.on("message",(function(e){console.log(`Received message: ${e}`),r.appendFile("./websocket/data"+function(){let e=new Date;return e.getFullYear()+""+(e.getMonth()+1<10?"0"+(e.getMonth()+1):e.getMonth()+1)+(e.getDate()<10?"0"+e.getDate():e.getDate())}()+".txt",e+"\n",(e=>{e&&console.log(e)}))})),i.on("close",(function(){console.log("WebSocket connection closed"),e()})),i.on("error",(function(e){console.log(`WebSocket error: ${e}`)}))}()})()})();